
// Disable some inspections due to enum names/values not matching kotlin style
@file:Suppress("unused", "EnumEntryName", "ClassName")
package com.rndash.mbheadunit.nativeCan.canB

/**
 *   Generated by db_converter.py
 *   ECU Enum values for data on CAN B
**/

enum class SPEI_NR(val raw: Int) {
	 /** memory block 1 **/
	 MEMORY1(0),
	 /** memory block 2 **/
	 MEMORY2(1),
	 /** memory block 3 **/
	 MEMORY3(2),
	 /** not defined **/
	 NOT_DEFINED(3), /* PROCESSING ERROR. Original Data: RAW: 3 - not defined */
	 /** not defined **/
	 NOT_DEFINED_4(4), /* PROCESSING ERROR. Original Data: RAW: 4 - not defined */
	 /** not defined **/
	 NOT_DEFINED_5(5), /* PROCESSING ERROR. Original Data: RAW: 5 - not defined */
	 /** not defined **/
	 NOT_DEFINED_6(6), /* PROCESSING ERROR. Original Data: RAW: 6 - not defined */
	 /** signal not available **/
	 SNV(7),
}

enum class DRTGHR(val raw: Int) {
	 /** No direction of rotation detection **/
	 PASSIVE(0),
	 /** direction of rotation forward **/
	 FORWARD(1),
	 /** direction of rotation backwards **/
	 REVERSE(2),
	 /** signal not available **/
	 SNV(3),
}

enum class DRTGHL(val raw: Int) {
	 /** No direction of rotation detection **/
	 PASSIVE(0),
	 /** direction of rotation forward **/
	 FORWARD(1),
	 /** direction of rotation backwards **/
	 REVERSE(2),
	 /** signal not available **/
	 SNV(3),
}

enum class LL_RL(val raw: Int) {
	 /** left hand drive **/
	 LL(1),
	 /** right hand drive **/
	 RL(2),
	 /** SG not programmed **/
	 SNV(3),
}

enum class LAND(val raw: Int) {
	 /** rest of the world **/
	 RDW(0),
	 /** USA version (CODE 494) **/
	 C494(1),
	 /** Canada (CODE 460) **/
	 C460(2),
	 /** Japan (CODE 498) **/
	 C498(3),
	 /** Switzerland (CODE 823) **/
	 C823(4),
	 /** Australia (CODE 625) **/
	 C625(5),
	 /** Gulf States (CODE 623) **/
	 C623(6),
	 /** SG not programmed **/
	 SNV(15),
}

enum class FCOD_BR(val raw: Int) {
	 /** BR 221 or BR 140 **/
	 BR221(0),
	 /** BR 129 **/
	 BR129(1),
	 /** BR 210 or BR 212 **/
	 BR210(2),
	 /** BR 202 or BR 204 **/
	 BR202(3),
	 /** BR 220 **/
	 BR220(4),
	 /** BR 170 **/
	 BR170(5),
	 /** BR 203 **/
	 BR203(6),
	 /** BR 168 **/
	 BR168(7),
	 /** BR 163 **/
	 BR163(8),
	 /** BR 208 **/
	 BR208(9),
	 /** BR 463 **/
	 BR463(10),
	 /** BR 215 **/
	 BR215(11),
	 /** BR 230 **/
	 BR230(12),
	 /** BR 211 **/
	 BR211(13),
	 /** BR 209 **/
	 BR209(14),
	 /** BR 461 **/
	 BR461(15),
	 /** BR 240 **/
	 BR240(16),
	 /** BR 251 **/
	 BR251(17),
	 /** BR 171 **/
	 BR171(18),
	 /** BR 164 **/
	 BR164(19),
	 /** BR 169 or BR 245 **/
	 BR169(20),
	 /** BR 199 **/
	 BR199(21),
	 /** BR 216 **/
	 BR216(22),
	 /** BR 219 **/
	 BR219(23),
	 /** BR 454 (z-car) **/
	 BR454(24),
	 /** NCV2 **/
	 NCV2(25),
	 /** V-Class **/
	 VITO(26),
	 /** Sprinter **/
	 SPRINTER(27),
	 /** NCV3 **/
	 NCV3(28),
	 /** NCV1 **/
	 NCV1(29),
	 /** all other BR **/
	 REST(30),
	 /** code does not exist **/
	 SNV(31),
}

enum class FCOD_KAR(val raw: Int) {
	 /** W **/
	 W(0),
	 /** V **/
	 V(1),
	 /** C **/
	 C(2),
	 /** S **/
	 S(3),
	 /** A **/
	 A(4),
	 /** R **/
	 R(5),
	 /** CL for BR 203 or BM3 for BR463 **/
	 CL(6),
	 /** SG not programmed **/
	 SNV(7),
}

enum class FCOD_MOT7(val raw: Int) {
	 /** M272 E35 **/
	 M272E35(0),
	 /** M271 E18 ML red. (105 kW) **/
	 M271E18ML105(1),
	 /** M271 E18 ML (120 kW) **/
	 M271E18ML120(2),
	 /** M112 E37 **/
	 M112E37(3),
	 /** M272 E25 **/
	 M272E25(4),
	 /** M272 E30 **/
	 M272E30(5),
	 /** M112 E28 **/
	 M112E28(7),
	 /** M112 E32 **/
	 M112E32(8),
	 /** M273 E46 **/
	 M273E46(10),
	 /** M273 E55 **/
	 M273E55(11),
	 /** M112 E26 **/
	 M112E26(12),
	 /** M113 E43 **/
	 M113E43(13),
	 /** M113 E50 **/
	 M113E50(14),
	 /** M271 E18 ML **/
	 M271E18ML135_140(18),
	 /** M271 DE18 ML red. (105 kW) **/
	 M271DE18ML105(19),
	 /** M271 DE18 ML (125 kW) **/
	 M271DE18ML125(20),
	 /** M111E E23 ML **/
	 M111E_E23ML(22),
	 /** M111E E20 **/
	 M111E_E20(23),
	 /** M111E E20 ML **/
	 M111E_E20ML(24),
	 /** M112 E32 red. (140 kW) **/
	 M112E32_140(25),
	 /** M266 E20 ATL **/
	 M266E20ATL(26),
	 /** M266 E15 **/
	 M266E15(27),
	 /** M266 E17 **/
	 M266E17(28),
	 /** M266 E20 **/
	 M266E20(29),
	 /** M275 E55 or M285 E55 **/
	 M275E55(30),
	 /** M137 E58 **/
	 M137E58(31),
	 /** OM 640 DE20 LA (60 kW) **/
	 OM640DE20LA60(32),
	 /** OM 640 DE20 LA (80 kW) **/
	 OM640DE20LA80(34),
	 /** OM642 DE30 LA (155 **/
	 OM642DE30LA155_160(35),
	 /** OM 640 DE20 LA (100 kW) **/
	 OM640DE20LA100(36),
	 /** OM613 DE32 LA or OM648 DE32 LA **/
	 OM613DE32LA(37),
	 /** OM 639 DE15 LA (70 **/
	 OM639DE15LA(38),
	 /** OM628 DE40 LA **/
	 OM628DE40LA(39),
	 /** OM642 DE30 LA (140 kW) **/
	 OM642DE30LA140(40),
	 /** OM612 DE27 LA or OM647 DE27 LA (120 **/
	 OM612DE27LA(43),
	 /** OM611 DE22 LA (105 **/
	 OM611DE22LA100(44),
	 /** OM611 DE22 LA (85 kW) or OM646 DE22 LA (90 kW) **/
	 OM611DE22LA85(45),
	 /** OM611 DE22 LA (75 kW) or OM646 DE22 LA (75 kW) **/
	 OM611DE22LA75(46),
	 /** AMG M112 E32 ML **/
	 AMGM112E32ML(48),
	 /** AMG M113 E55 ML **/
	 AMGM113E55ML(49),
	 /** AMG M275 E60 or AMG M285 E60 **/
	 AMGM275E60(51),
	 /** AMG M137 E63 **/
	 AMGM137E63(56),
	 /** AMG M113 E55 **/
	 AMGM113E55(57),
	 /** AMG M157 E60 LA **/
	 AMGM157E60LA(60),
	 /** AMG M156 E63 **/
	 AMGM156E63(61),
	 /** M134 E11 (3A91) **/
	 M134E11(64),
	 /** M135 E13 (4A90) **/
	 M135E13(65),
	 /** M135 E15 (4A91) **/
	 M135E15(66),
	 /** M135 E15 ATL **/
	 M135E15ATL(67),
	 /** M272 DE25 **/
	 M272DE25(68),
	 /** M272 DE30 **/
	 M272DE30(69),
	 /** M272 DE35 **/
	 M272DE35(70),
	 /** M273 DE46 **/
	 M273DE46(71),
	 /** M273 DE55 **/
	 M273DE55(72),
	 /** M271 E18 ML Attr. (115kW) **/
	 M271E18MLATTR115(79),
	 /** M271 E18 ML Attr. (141kW) **/
	 M271E18MLATTR141(80),
	 /** OM629 DE40 LA **/
	 OM629DE40LA(96),
	 /** OM646 DE22 EVO (120 **/
	 OM646DE22EVO120(97),
	 /** OM646 DE22 LA EVO (100kW) **/
	 OM646DE22LAEVO100(98),
	 /** OM646 DE22 LA EVO (85KW) **/
	 OM646DE22LAEVO85(99),
}

enum class VER_AE(val raw: Int) {
	 /** change year " **/
	 AE1(0),
	 /** change year " **/
	 AEX(1),
	 /** change year " **/
	 AE2(2),
	 /** start of series production **/
	 SB(3),
}

enum class VER_JAHR(val raw: Int) {
	 /** year 0 (beginning of year 2000) **/
	 YEAR00(0),
	 /** year 1 **/
	 YEAR01(1),
	 /** Year 29 **/
	 YEAR29(29),
	 /** not defined **/
	 N_DEF(30),
	 /** start of series production **/
	 SB(31),
}

enum class TPM_VH(val raw: Int) {
	 /** no TPM installed **/
	 NO_TPM(0),
	 /** TPM **/
	 LOWLINE(1),
	 /** TPM **/
	 MIDLINE(2),
	 /** signal not available **/
	 SNV(3),
}

enum class BLS_ST(val raw: Int) {
	 /** brake not applied **/
	 BREMSE_NBET(0),
	 /** brake applied **/
	 BREMSE_BET(1),
	 /** not defined **/
	 NOT_DEFINED(2), /* PROCESSING ERROR. Original Data: RAW: 2 - not defined */
	 /** signal not available **/
	 SNV(3),
}

enum class WHC(val raw: Int) {
	 /** Selector lever in position "D" **/
	 D(5),
	 /** Selector lever in position "N" **/
	 N(6),
	 /** Selector lever in position "R" **/
	 R(7),
	 /** Selector lever in position "P" **/
	 P(8),
	 /** Selector lever in position "+" **/
	 PLUS(9),
	 /** Selector lever in position "-" **/
	 MINUS(10),
	 /** Selector lever in intermediate position "N-D" **/
	 N_ZW_D(11),
	 /** Selector lever in intermediate position "R-N" **/
	 R_ZW_N(12),
	 /** Selector lever in intermediate position "P-R" **/
	 P_ZW_R(13),
	 /** Selector lever position implausible **/
	 SNV(15),
}

enum class HZL_ST(val raw: Int) {
	 /** Heater shut-off valve is closed **/
	 HEATER_SHUT_OFF_VALVE_IS_CLOSED(0), /* PROCESSING ERROR. Original Data: RAW: 0 - Heater shut-off valve is closed */
	 /** Heater shut-off valve is on **/
	 OPEN(1),
	 /** Heating shut-off valve is clocked **/
	 TAKT(2),
	 /** signal not available **/
	 SNV(3),
}

enum class DRTGVL(val raw: Int) {
	 /** No direction of rotation detection **/
	 PASSIVE(0),
	 /** direction of rotation forward **/
	 FORWARD(1),
	 /** direction of rotation backwards **/
	 REVERSE(2),
	 /** signal not available **/
	 SNV(3),
}

enum class WHST(val raw: Int) {
	 /** Gear selector lever in position "P" **/
	 P(0),
	 /** Gear selector lever in position "R" **/
	 R(1),
	 /** Gear selector lever in position "N" **/
	 N(2),
	 /** Gear selector lever in position "D" **/
	 D(4),
	 /** signal not available **/
	 SNV(7),
}

enum class P_KNL(val raw: Int) {
	 /** 20bar **/
	 P_KNL0(0),
	 /** 20bar **/
	 P_KNL1(1),
	 /** 20bar **/
	 P_KNL2(2),
	 /** 18bar **/
	 P_KNL3(3),
	 /** 18bar **/
	 P_KNL4(4),
	 /** SG not programmed **/
	 SNV(15),
}

enum class GBL_KNL(val raw: Int) {
	 /** 25% basic ventilation **/
	 GBL_KNL0(0),
	 /** 40% basic ventilation **/
	 GBL_KNL1(1),
	 /** 30% basic ventilation **/
	 GBL_KNL2(2),
	 /** SG not programmed **/
	 SNV(7),
}

enum class VIN_MSG(val raw: Int) {
	 /** not defined **/
	 N_DEF(0),
	 /** VIN characters 1 **/
	 LO(1),
	 /** VIN characters 8 **/
	 MID(2),
	 /** VIN characters 15 **/
	 HI(3),
}

enum class GPS_FIX(val raw: Int) {
	 /** Reserved **/
	 RES(0),
	 /** not available **/
	 NAV(1),
	 /** No fix **/
	 NO_FIX(2),
	 /** 2D fix **/
	 FIX_2D(3),
	 /** 3D fix **/
	 FIX_3D(4),
}

enum class DR_MM_STAT(val raw: Int) {
	 /** DR and MM not available **/
	 NONE(0),
	 /** DR ok, MM not available **/
	 DR(1),
	 /** DR ok, MM ok **/
	 MM(2),
	 /** Signal not available **/
	 SNA(3),
}

enum class MM_ROUTE_STAT(val raw: Int) {
	 /** Route calculation possible **/
	 ROUTE_OK(0),
	 /** No route **/
	 NO_ROUTE(1),
	 /** Not defined **/
	 NDEF(2),
	 /** Signal not available **/
	 SNA(3),
}

enum class MM_ROAD_STAT(val raw: Int) {
	 /** On road **/
	 ON_RD(0),
	 /** Off road **/
	 OFF_RD(1),
	 /** Not defined **/
	 NDEF(2),
	 /** Signal not available **/
	 SNA(3),
}

enum class MM_MAP_STAT(val raw: Int) {
	 /** On map **/
	 ON_MAP(0),
	 /** Off map **/
	 OFF_MAP(1),
	 /** Not defined **/
	 NDEF(2),
	 /** Signal not available **/
	 SNA(3),
}

enum class DRTGVR(val raw: Int) {
	 /** No direction of rotation detection **/
	 PASSIVE(0),
	 /** direction of rotation forward **/
	 FORWARD(1),
	 /** direction of rotation backwards **/
	 REVERSE(2),
	 /** signal not available **/
	 SNV(3),
}

enum class LANGUAGE(val raw: Int) {
	 /** German **/
	 GERMAN(0),
	 /** English **/
	 ENGLISH(1),
	 /** FRENCH **/
	 FRENCH(2),
	 /** Italian **/
	 ITALIAN(3),
	 /** Spanish **/
	 SPANISH(4),
	 /** Japanese **/
	 JAPANESE(5),
	 /** Dutch **/
	 DUTCH(6),
	 /** Danish **/
	 DAENISH(7),
	 /** Swedish **/
	 SWEDISH(8),
	 /** Portuguese **/
	 PORTUGUESE(9),
	 /** Turkish **/
	 TURKISH(10),
	 /** Russian **/
	 RUSSIAN(11),
	 /** signal not available **/
	 SNV(15),
}

enum class KI_STAT(val raw: Int) {
	 /** reserved **/
	 RESERVED(0), /* PROCESSING ERROR. Original Data: RAW: 0 - reserved */
	 /** reserved **/
	 RESERVED_1(1), /* PROCESSING ERROR. Original Data: RAW: 1 - reserved */
	 /** Neutral **/
	 NEUTRAL(2), /* PROCESSING ERROR. Original Data: RAW: 2 - Neutral */
	 /** Audio **/
	 AUDIO(3),
	 /** Navigation **/
	 NAVI(4),
	 /** PHONE **/
	 TEL(5),
	 /** New Services **/
	 NEW_SER(6),
	 /** Voice radio KI Dlg closed **/
	 SPR_FNK_DLG_CLO(19),
	 /** Radio data transmission KI Dlg closed **/
	 DAT_FNK_DLG_CLO(20),
	 /** Sprachfunk-KI Dlg opened **/
	 SPR_FNK_DLG_OPN(21),
	 /** Radio data transmission KI Dlg opened **/
	 DAT_FNK_DLG_OPN(22),
	 /** signal not available **/
	 SNV(255),
}

enum class KI_STAT_MSS(val raw: Int) {
	 /** reserved **/
	 RESERVED(0), /* PROCESSING ERROR. Original Data: RAW: 0 - reserved */
	 /** reserved **/
	 RESERVED_1(1), /* PROCESSING ERROR. Original Data: RAW: 1 - reserved */
	 /** Neutral **/
	 NEUTRAL(2), /* PROCESSING ERROR. Original Data: RAW: 2 - Neutral */
	 /** Audio **/
	 AUDIO(3),
	 /** Navigation **/
	 NAVI(4),
	 /** PHONE **/
	 TEL(5),
	 /** New Services **/
	 NEW_SER(6),
	 /** Voice radio KI Dlg closed **/
	 SPR_FNK_DLG_CLO(19),
	 /** Radio data transmission KI Dlg closed **/
	 DAT_FNK_DLG_CLO(20),
	 /** Sprachfunk-KI Dlg opened **/
	 SPR_FNK_DLG_OPN(21),
	 /** Radio data transmission KI Dlg opened **/
	 DAT_FNK_DLG_OPN(22),
	 /** signal not available **/
	 SNV(255),
}

enum class KONFIG_RS(val raw: Int) {
	 /** insensitive levels **/
	 UEMPF0(0),
	 /** insensitive levels **/
	 UEMPF1(1),
	 /** insensitive levels **/
	 UEMPF2(2),
	 /** preset Rec. **/
	 VOR_EMPF(3),
	 /** more sensitive levels **/
	 EMPF0(4),
	 /** more sensitive levels **/
	 EMPF1(5),
	 /** more sensitive levels **/
	 EMPF2(6),
	 /** Reinitialization **/
	 NEW_INI(7),
}

enum class HD_ST(val raw: Int) {
	 /** not defined **/
	 N_DEF(0),
	 /** trunk lid closes **/
	 HD_RI_ZU(1),
	 /** trunk lid opens **/
	 HD_RI_AUF(2),
	 /** trunk lid is completely open **/
	 HD_ST_AUF(3),
	 /** trunk lid in intermediate position **/
	 HD_ST_ZW(4),
	 /** trunk lid is completely closed **/
	 HD_ST_ZU(5),
	 /** signal not available **/
	 SNV(7),
}

enum class VDK_STAT(val raw: Int) {
	 /** Convertible top unlocked (intermediate position) **/
	 VD_ENTR_ZW(0),
	 /** convertible top open and locked **/
	 VD_OFFEN(1),
	 /** Convertible top closed and locked **/
	 VD_GESCHL(2),
	 /** top position unknown **/
	 SNV(3),
}

enum class VDK_KL_ANF(val raw: Int) {
	 /** Off **/
	 OFF(0),
	 /** steady light **/
	 DL(1),
	 /** flashing light **/
	 BL(2),
	 /** not defined **/
	 NOT_DEFINED(3), /* PROCESSING ERROR. Original Data: RAW: 3 - not defined */
}

enum class SHD_ST(val raw: Int) {
	 /** SHD to **/
	 SHD_ST_ZU(0),
	 /** Sunroof is fully open **/
	 SHD_ST_AUF(1),
	 /** lifting roof is on **/
	 HUB_ST_AUF(2),
	 /** sliding **/
	 SHD_ST_ST(3),
	 /** SHD in anti-boom position **/
	 SHD_ST_AW(4),
	 /** Sunroof in intermediate position **/
	 SHD_ST_ZW(5),
	 /** lifting roof in intermediate position **/
	 HUB_ST_ZW(6),
	 /** SHD denormalized **/
	 SNV(7),
}

enum class ERROR_RS(val raw: Int) {
	 /** No error **/
	 NO_ERROR(0),
	 /** Error 1 **/
	 ERROR_1(1),
	 /** Error 2 **/
	 ERROR_2(2),
	 /** Error 3 **/
	 ERROR_3(3),
	 /** Error 4 **/
	 ERROR_4(4),
	 /** Error 5 **/
	 ERROR_5(5),
	 /** Error 6 **/
	 ERROR_6(6),
	 /** Error 7 **/
	 ERROR_7(7),
}

enum class ESP_BET(val raw: Int) {
	 /** Not pressed (rocker and push push) **/
	 NBET(0),
	 /** ESP on pressed (rocker), not defined (push push) **/
	 EIN_NDEF(1),
	 /** ESP off actuated (rocker), actuated (Push Push) **/
	 AUS_BET(2),
	 /** signal not available (rocker and push push) **/
	 SNV(3),
}

enum class ART_ABW_BET(val raw: Int) {
	 /** not defined (rocker), not actuated (push push) **/
	 NDEF_NBET(0),
	 /** Distance warning off (rocker), not defined (Push Push) **/
	 AUS_NDEF(1),
	 /** Distance warning on (rocker), activated (Push Push) **/
	 ON_BET(2),
	 /** signal not available (rocker and push push) **/
	 SNV(3),
}

enum class VDK_ANF(val raw: Int) {
	 /** no actuation **/
	 NBET(0),
	 /** open **/
	 OEFF(1),
	 /** close **/
	 CLOSE(2),
	 /** undefined **/
	 NDEF(3),
}

enum class KISI_ST(val raw: Int) {
	 /** No child seat recognized **/
	 NO_KISI(0),
	 /** child seat detected (installed forward) **/
	 KISI_V_ERK(1),
	 /** child seat detected (installed backwards) **/
	 KISI_R_ERK(2),
	 /** child seat incorrect position **/
	 KISI_FPOS(4),
	 /** Child seat detection error **/
	 KISI_FEHLER(6),
	 /** signal not available **/
	 SNV(7),
}

enum class SBE_BF(val raw: Int) {
	 /** class 0 (not used) **/
	 CLASS0(0),
	 /** Class 1 **/
	 CLASS_1(1),
	 /** Class 2 **/
	 CLASS2(2),
	 /** Class 3 **/
	 CLASS_3(3),
	 /** Class 4 **/
	 CLASS_4(4),
	 /** Class 5 **/
	 CLASS_5(5),
	 /** Error SBE **/
	 SBE_FEHLER(6),
	 /** signal not available **/
	 SNV(7),
}

enum class PSG_DETEC_FAST(val raw: Int) {
	 /** Signal not available **/
	 SNA(0),
	 /** Passenger present **/
	 PSG_PRESENT(1),
	 /** Fault **/
	 FAULT(2),
	 /** Passenger absent **/
	 PSG_ABSENT(3),
}

enum class GS_BF(val raw: Int) {
	 /** seat belt buckle inserted **/
	 GS_OK(0),
	 /** seat belt buckle not inserted **/
	 GS_NOK(1),
	 /** Belt buckle error **/
	 GS_FEHLER(2),
	 /** signal not available **/
	 SNV(3),
}

enum class SBE_F(val raw: Int) {
	 /** class 0 (not used) **/
	 CLASS0(0),
	 /** Class 1 **/
	 CLASS_1(1),
	 /** Class 2 **/
	 CLASS2(2),
	 /** Class 3 **/
	 CLASS_3(3),
	 /** Class 4 **/
	 CLASS_4(4),
	 /** Class 5 **/
	 CLASS_5(5),
	 /** Error SBE **/
	 SBE_FEHLER(6),
	 /** signal not available **/
	 SNV(7),
}

enum class GS_F(val raw: Int) {
	 /** seat belt buckle inserted **/
	 GS_OK(0),
	 /** seat belt buckle not inserted **/
	 GS_NOK(1),
	 /** Belt buckle error **/
	 GS_FEHLER(2),
	 /** signal not available **/
	 SNV(3),
}

enum class WSS_PSG(val raw: Int) {
	 /** Class 0 **/
	 CLASS0(0),
	 /** Class 1 **/
	 CLASS1(1),
	 /** Class 2 **/
	 CLASS2(2),
	 /** Class 3 **/
	 CLASS3(3),
	 /** Class 4 **/
	 CLASS4(4),
	 /** Signal not available **/
	 SNA(7),
}

enum class PSG_DETECT_FAST(val raw: Int) {
	 /** Occupant Present **/
	 OP_PRESENT(0),
	 /** Occupant Absent **/
	 OP_ABSENT(1),
	 /** Failure **/
	 OP_FAIL(2),
	 /** Signal not available **/
	 SNA(3),
}

enum class WSS_ID(val raw: Int) {
	 /** Texas Instruments Start **/
	 TEXAS_INSTRUMENTS_START(16),
	 /** Bizerba Start **/
	 BIZERBA_START(32),
	 /** Bladder Start **/
	 BLADDER_START(64),
	 /** Panasonic Start **/
	 PANASONIC_START(96),
	 /** Signal not available **/
	 SNA(255),
}

enum class WSS_ANZ(val raw: Int) {
	 /** no combined message **/
	 NO_MSG(0),
	 /** low weight recognized BF airbag cut off **/
	 GW_SMALL(1),
	 /** BF airbag shut off see operating instructions. **/
	 AB_AUS(2),
	 /** BF airbag switched on. see operating instructions. **/
	 AB_EIN(3),
}

enum class LKU_VORN(val raw: Int) {
	 /** middle position **/
	 PARTIAL(0),
	 /** position up **/
	 OPEN(1),
	 /** position closed **/
	 CLOSED(2),
	 /** signal invalid **/
	 SNV(3),
}

enum class LKM_VORN(val raw: Int) {
	 /** middle position **/
	 PARTIAL(0),
	 /** position up **/
	 OPEN(1),
	 /** position closed **/
	 CLOSED(2),
	 /** signal invalid **/
	 SNV(3),
}

enum class LKO_VORN(val raw: Int) {
	 /** middle position **/
	 PARTIAL(0),
	 /** position up **/
	 OPEN(1),
	 /** position closed **/
	 CLOSED(2),
	 /** signal invalid **/
	 SNV(3),
}

enum class TPM_STAT(val raw: Int) {
	 /** Display pressure values ​​ **/
	 DISP_VAL(0),
	 /** Measurement ongoing **/
	 MEASURE(1),
	 /** Waiting for pressure values ​​ **/
	 WAIT(2),
	 /** TPM switched off **/
	 OFF(3),
	 /** TPM diagnostic mode **/
	 DIAG(4),
	 /** TPM error **/
	 ERROR(5),
	 /** TPM low line active **/
	 ACTIVE(6),
	 /** No wheel electronics **/
	 NO_WE(7),
	 /** Signal not available **/
	 SNA(15),
}

enum class TPM_MSGDISP_RQ(val raw: Int) {
	 /** No message **/
	 NO_MESS(0),
	 /** New pressure values ​​ **/
	 NEW_VAL(1),
	 /** Implausible pressure **/
	 UNPLAUSIBLE(2),
	 /** No wheel electronics **/
	 NO_WE(3),
	 /** TPM switched off **/
	 OFF(4),
	 /** TPM error **/
	 ERROR(5),
	 /** TPM temporarily not available **/
	 TNA(6),
	 /** Warning last ignition **/
	 WLI(7),
	 /** Missing some wheel electronics **/
	 WE_MISS(8),
	 /** TPM new activated **/
	 NEW_ACT(9),
	 /** New pressure values ​​(Low Line) **/
	 NEW_VAL_L(10),
	 /** Implausible pressure (Low Line) **/
	 UNPLAUSI_L(11),
	 /** Signal not available **/
	 SNA(15),
}

enum class TPM_WARNDISP_RQ(val raw: Int) {
	 /** No warning **/
	 NO_WARN(0),
	 /** Soft warning **/
	 SOFT(1),
	 /** Low pressure **/
	 LOW_P(2),
	 /** Fast pressure lost **/
	 FAST(3),
	 /** Signal not available **/
	 SNA(7),
}

enum class TIREPRESS_FL(val raw: Int) {
	 /** No pressure indication **/
	 NO_IND(254),
	 /** Signal not available **/
	 SNA(255),
}

enum class TIREPRESS_FR(val raw: Int) {
	 /** No pressure indication **/
	 NO_IND(254),
	 /** Signal not available **/
	 SNA(255),
}

enum class TIREPRESS_RL(val raw: Int) {
	 /** No pressure indication **/
	 NO_IND(254),
	 /** Signal not available **/
	 SNA(255),
}

enum class TIREPRESS_RR(val raw: Int) {
	 /** No pressure indication **/
	 NO_IND(254),
	 /** Signal not available **/
	 SNA(255),
}

enum class TIREPRESS_SPR(val raw: Int) {
	 /** No pressure indication **/
	 NO_IND(254),
	 /** Signal not available **/
	 SNA(255),
}

enum class ZIFFER_HU(val raw: Int) {
	 /** no key pressed **/
	 N_BET(0),
	 /** 1 **/
	 T1_KEY(1),
	 /** button 2 **/
	 T2(2),
	 /** button 3 **/
	 T3(3),
	 /** button 4 **/
	 T4(4),
	 /** key 5 **/
	 T5(5),
	 /** key 6 **/
	 T6(6),
	 /** button 7 **/
	 T7(7),
	 /** key 8 **/
	 T8(8),
	 /** 9 **/
	 T9_KEY(9),
	 /** 0 **/
	 T10_BUTTON(10),
}

enum class AKT_SYS(val raw: Int) {
	 /** no active application **/
	 IDLE(0),
	 /** radio data active **/
	 RADIO_DATA_TRANSMISSION(1),
}

enum class FUNCTION_KEYS(val raw: Int) {
	 /** no key pressed **/
	 N_BET(0),
	 /** function key 1 **/
	 F1(1),
	 /** function key 2 **/
	 F2(2),
	 /** function key 3 **/
	 F3(3),
	 /** Function key 4 **/
	 F4(4),
	 /** function key 5 **/
	 F5(5),
	 /** Function key 6 **/
	 F6(6),
	 /** Function key 7 **/
	 F7(7),
}

